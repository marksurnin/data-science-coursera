ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
letters
sample(letters)
sample(LETTERS)
flips <- sample(c(0, 1), 100, replace="TRUE", prob = c(0.3, 0.7))
flips <- sample(c(0, 1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
flips <- sample(c(0, 1), 100, replace = FALSE, prob = c(0.3, 0.7))
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- (100, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 100, prob = 0.7)
flips2 <- (n = 100, size = 1, prob = 0.7)
flips2 <- rbinom(n = 100, size = 1, prob = 0.7)
play()
flips2 <- rbinom(100, size = 1, prob = 0.7)
nxt()
flips2
flips2 <- rbinom(n = 100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
?rpois
rpois(n = 5, mean = 10)
rpois(10, n = 5)
replicate(100, rpois(5, 10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
str(my_pois)
cm <- colMeans(my_pois)
hist(cm)
cars
data(cars)
?cars
head(cars)
str(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed" ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, title = "My Plot")
plot(cars, main = "My Plot")
plot(cars, main = "My Plot", sub = "My Plot Subtitle")
plot(cars,  sub = "My Plot Subtitle")
?par
?plot
?par
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
?points
plot(cars, pch = 2)
load(mtcars)
mtcars
data(mtcars)
play()
dim(mtcars)
summary(mtcars)
str(mtcars)
head(mtcars)
nxt()
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars)
hist(mtcars$mpg)
df = data.frame(x = rnorm(9), y = rep(c("a", "b", "c"), each = 3), z = rnorm(9))
df
tables()
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
swirl()
swirl()
library(swirl)
swirl()
path2csv
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
?read.csv
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(data)
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
йгше
quit
quit()
?ldply
library(dplyr)
?ldply
?dplyr
browseVignettes(package = "dplyr")
?complete.cases
complete.cases(airquality)
?unzip
getwd()
setwd('./data-cleaning')
setwd('./final_project')
if (!dir.exists('./data')) {
dir.create('./data')
}
fileUrl <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip'
download.file(fileUrl, destfile='./data/dataset.zip', method='curl')
unzip('./data/dataset.zip', exdir='./data')
#x_test <- read.csv('./data/test/X_test.txt')
?list.files
list.files(path="./data/UCI HAR Dataset/", recursive = TRUE)
file.path
?file.path
?read.table
?file.path
dataPath <- file.path('./data', 'UCI HAR Dataset')
dataPath
activityTest <- read.table(file = file.path(dataPath, 'test', 'y_test.txt'), header = FALSE)
head(activityTest)
featuresTest <- read.table(file = file.path(dataPath, 'test', 'X_test.txt'), header = FALSE)
featuresTrain <- read.table(file = file.path(dataPath, 'train', 'X_train.txt'), header = FALSE)
activityTest <- read.table(file = file.path(dataPath, 'test', 'y_test.txt'), header = FALSE)
activityTrain <- read.table(file = file.path(dataPath, 'train', 'y_train.txt'), header = FALSE)
subjectTest <- read.table(file = file.path(dataPath, 'test', 'subject_test.txt'), header = FALSE)
subjectTrain <- read.table(file = file.path(dataPath, 'train', 'subject_train.txt'), header = FALSE)
str(featuresTest)
dim(featuresTest)
dim(featuresTrain)
dim(activityTest)
dim(activityTrain)
dim(subjectTest)
dim(subjectTrain)
?rbind
features <- rbind(featuresTest, featuresTrain)
dim(features)
activity <- rbind(activityTest, activityTrain)
dim(activity)
subject <- rbind(subjectTest, subjectTrain)
dim(subject)
?names
head(activity)
names(activity) <- c("activity")
head(activity)
head(subject)
names(subject) <- c("subject")
head(subject)
featureNames <- read.table(file = file.path(dataPath, "features.txt"))
dim(featureNames)
head(featureNames)
?read.table
featureNames <- featureNames$V2
dim(featureNames)
head(featureNames)
featureNames <- read.table(file = file.path(dataPath, "features.txt"))
head(featureNames)
dim(featureNames)
str(features)
names(features) <- featureNames$V2
str(features)
dim(features)
dim(activity)
dim(subject)
head(activity)
?cbind
?read.table
df <- cbind(subject, activity, features)
dim(df)
head(df)
str(df)
?grep
grep("mean|std", names(df))
names(df)
grep("mean|std", names(df))
grep("mean\\(\\)|std\\(\\)", names(df))
measurements <- df[, relevantIndices]
relevantIndices <- grep("mean|std", names(df))
measurements <- df[, relevantIndices]
dim(measurements)
dim(df)
df[1:6, 1:2]
relevantIndices <- grep("mean|std", names(df))
relevantIndices
relevantIndices <- c(1, 2, relevantIndices)
measurements <- df[, relevantIndices]
relevantIndices <- c(1, 2, relevantIndices)
relevantIndices
relevantIndices <- grep("mean|std", names(df))
relevantIndices <- c(1, 2, relevantIndices)
relevantIndices
## Merge everything into one data frame
all_data <- cbind(subject, activity, features)
# 2. Extract only the measurements on the mean and standard deviation for each measurement.
relevantIndices <- grep("mean|std", names(all_data))
## Make sure the subject and activity columns are not left out.
relevantIndices <- c(1, 2, relevantIndices)
mean_std_data <- all_data[, relevantIndices]
dim(mean_std_data)
dim(all_data)
activityNames <- read.table(file = file.path(dataPath, "activity_labels.txt"))
activityNames
?select
??select
library(dplyr)
??select
?select
?filter
activityNames
filter(activityNames, V1 == 5)
activtyNames[activityNames$V1 == 5, 2]
activityNames[activityNames$V1 == 5, 2]
df[1:6, 1:2]
mean_std_data[1:6, 1:3]
?replace
View(activityNames)
View(activityNames)
View(mean_std_data)
transmute(mean_std_data, activity = activityNames[activityNames$V1 == activity], 2)
?as.factor
str(mean_std_data)
activityNames
activityNames$V2
as.factor(mean_std_data$activity, labels = activityNames$V2)
?cut
cut(mean_std_data$activity, labels = activityNames$V2)
cut(mean_std_data$activity, levels = c(1, 2, 3, 4, 5, 6), labels = activityNames$V2)
cut(mean_std_data$activity, breaks = c(1, 2, 3, 4, 5, 6), labels = activityNames$V2)
length(activityNames$V2)
length(c(1, 2, 3, 4, 5, 6))
?c
mean_std_data$activity <- mean_std_data$activity %>% as.factor
str(mean_std_data)
cut(mean_std_data$activity, breaks = c(1, 2, 3, 4, 5, 6), labels = activityNames$V2)
mean_std_data <- all_data[, relevantIndices]
# 3. Use descriptive activity names to name the activities in the data set
activityNames <- read.table(file = file.path(dataPath, "activity_labels.txt"))
cut(mean_std_data$activity, breaks = c(0, 1, 2, 3, 4, 5, 6), labels = activityNames$V2)
head(mean_std_data$activity, 2)
mean_std_data <- cut(mean_std_data$activity, breaks = c(0, 1, 2, 3, 4, 5, 6), labels = activityNames$V2)
head(mean_std_data$activity, 2)
str(mean_std_data)
mean_std_data
str(mean_std_data)
mean_std_data <- all_data[, relevantIndices]
# 3. Use descriptive activity names to name the activities in the data set
activityNames <- read.table(file = file.path(dataPath, "activity_labels.txt"))
mean_std_data$activity <- cut(mean_std_data$activity, breaks = c(0, 1, 2, 3, 4, 5, 6), labels = activityNames$V2)
head(mean_std_data$activity, 2)
mean_std_data <- all_data[, relevantIndices]
# 3. Use descriptive activity names to name the activities in the data set
activityNames <- read.table(file = file.path(dataPath, "activity_labels.txt"))
head(mean_std_data$activity, 2)
mean_std_data$activity <- cut(mean_std_data$activity, breaks = c(0, 1, 2, 3, 4, 5, 6), labels = activityNames$V2)
str(mean_std_data)
levels(mean_std_data$activity)
?read.table
str(mean_std_data$activity)
head(mean_std_data$activity)
head(mean_std_data$activity, 100)
head(mean_std_data$activity, 1000)
?which
which(mean_std_data$activity == 5)
which(mean_std_data$activity == '5')
which(is.numeric(mean_std_data$activity)
)
is.numeric(5)
levels(mean_std_data$activity)
str(mean_std_data$activity)
str(mean_std_data)
## Merge everything into one data frame
df <- cbind(subject, activity, features)
# 2. Extract only the measurements on the mean and standard deviation for each measurement.
relevantIndices <- grep("mean|std", names(df))
## Make sure the subject and activity columns are not left out.
relevantIndices <- c(1, 2, relevantIndices)
df <- df[, relevantIndices]
# 3. Use descriptive activity names to name the activities in the data set
activityNames <- read.table(file = file.path(dataPath, "activity_labels.txt"))
## Rename activity indices into corresponding activity names
df$activity <- cut(df$activity, breaks = c(0, 1, 2, 3, 4, 5, 6), labels = activityNames$V2)
str(df)
names(df) <- gsub('t', 'Time')
names(df) <- gsub('t', 'Time', names(df))
str(df)
## Merge everything into one data frame
df <- cbind(subject, activity, features)
# 2. Extract only the measurements on the mean and standard deviation for each measurement.
relevantIndices <- grep("mean|std", names(df))
## Make sure the subject and activity columns are not left out.
relevantIndices <- c(1, 2, relevantIndices)
df <- df[, relevantIndices]
# 3. Use descriptive activity names to name the activities in the data set
activityNames <- read.table(file = file.path(dataPath, "activity_labels.txt"))
## Rename activity indices into corresponding activity names
df$activity <- cut(df$activity, breaks = c(0, 1, 2, 3, 4, 5, 6), labels = activityNames$V2)
names(df) <- gsub('^t', 'Time', names(df))
str(df)
names(df) <- gsub('^t', 'Time', names(df))
names(df) <- gsub('Acc', 'Accelerometer', names(df))
names(df) <- gsub('Gyro', 'Gyroscope', names(df))
names(df) <- gsub('Mag', 'Magnitude', names(df))
str(df)
names(df) <- gsub('^f', 'Frequency', names(df))
str(df)
names(df) <- gsub('BodyBody', 'Body', names(df))
str(df)
?plyr
??plyr
?head
df[1:6, 1:6]
df[1:6, 1:4]
?aggregate
?dplyr
?group_by
View(df)
View(df)
by_activity <- group_by(df, activity)
str(by_activity)
?summarise
?summarise_each
summarise_all(by_activity, mean)
summarise_at(by_activity, .cols = c(-1), mean)
packageVersion("dplyr")
?vars
summarise_at(by_activity, .cols = -c(1), mean)
c(1)
c(-1)
test <- c(1, 2, 3, 4)
test[c(1)]
test[-c(1)]
test[c(-1)]
summarise_at(by_activity, .cols = -c(1), mean)
summarise_at(by_activity, cols = -c(1), mean)
summarise_at(by_activity, .cols = c(3), mean)
by_activity
## Merge everything into one data frame
df <- cbind(subject, activity, features)
# 2. Extract only the measurements on the mean and standard deviation for each measurement.
relevantIndices <- grep("mean|std", names(df))
## Make sure the subject and activity columns are not left out.
relevantIndices <- c(1, 2, relevantIndices)
df <- df[, relevantIndices]
# 3. Use descriptive activity names to name the activities in the data set
activityNames <- read.table(file = file.path(dataPath, "activity_labels.txt"))
## Rename activity indices into corresponding activity names
df$activity <- cut(df$activity, breaks = c(0, 1, 2, 3, 4, 5, 6), labels = activityNames$V2)
# 4. Appropriately label the data set with descriptive variable names.
names(df) <- gsub('^t', 'Time', names(df))
names(df) <- gsub('^f', 'Frequency', names(df))
names(df) <- gsub('Acc', 'Accelerometer', names(df))
names(df) <- gsub('Gyro', 'Gyroscope', names(df))
names(df) <- gsub('Mag', 'Magnitude', names(df))
names(df) <- gsub('BodyBody', 'Body', names(df))
# 5. Create a second, independent tidy data set with the average
#    of each variable for each activity and each subject.
by_activity <- group_by(df, activity)
summarise_at(by_activity, .cols = c(3), mean)
by_activity %>% summarise_at(c(4,5), mean)
names(df)
names(df) <- gsub('-', '_', names(df))
by_activity <- group_by(df, activity)
names(df)
by_activity %>% summarise_at(c(4,5), mean)
df <- cbind(subject, activity, features)
# 2. Extract only the measurements on the mean and standard deviation for each measurement.
relevantIndices <- grep("mean|std", names(df))
## Make sure the subject and activity columns are not left out.
relevantIndices <- c(1, 2, relevantIndices)
df <- df[, relevantIndices]
# 3. Use descriptive activity names to name the activities in the data set
activityNames <- read.table(file = file.path(dataPath, "activity_labels.txt"))
## Rename activity indices into corresponding activity names
df$activity <- cut(df$activity, breaks = c(0, 1, 2, 3, 4, 5, 6), labels = activityNames$V2)
# 4. Appropriately label the data set with descriptive variable names.
names(df) <- gsub('^t', 'Time', names(df))
names(df) <- gsub('^f', 'Frequency', names(df))
names(df) <- gsub('Acc', 'Accelerometer', names(df))
names(df) <- gsub('Gyro', 'Gyroscope', names(df))
names(df) <- gsub('Mag', 'Magnitude', names(df))
names(df) <- gsub('BodyBody', 'Body', names(df))
names(df) <- gsub('-', '', names(df))
# 5. Create a second, independent tidy data set with the average
#    of each variable for each activity and each subject.
by_activity <- group_by(df, activity)
names(df)
by_activity %>% summarise_at(c(4,5), mean)
str(by_activity)
df %>% summarise_at(c(4,5), mean)
?group_by
by_activity <- group_by(df, subject, activity)
by_activity
?groups
groups(by_activity)
df$subject <- as.factor(df$subject)
df
str(df)
?dcast
??dcast
by_activity <- group_by(df, subject, activity)
str(by_activity)
summarise_at(by_activity, mean())
summarise_at(by_activity, mean
)
summarise_all(by_activity, mean)
summarise_at(by_activity, 3:length(names(by_activity)), mean)
ncol(by_activity)
summarise_at(by_activity, 3:ncol(by_activity), mean)
View(by_activity)
dataPath <- file.path('./data', 'UCI HAR Dataset')
files <- list.files(path = dataPath, recursive = TRUE)
## Read files
featuresTest <- read.table(file = file.path(dataPath, 'test', 'X_test.txt'), header = FALSE)
featuresTrain <- read.table(file = file.path(dataPath, 'train', 'X_train.txt'), header = FALSE)
activityTest <- read.table(file = file.path(dataPath, 'test', 'y_test.txt'), header = FALSE)
activityTrain <- read.table(file = file.path(dataPath, 'train', 'y_train.txt'), header = FALSE)
subjectTest <- read.table(file = file.path(dataPath, 'test', 'subject_test.txt'), header = FALSE)
subjectTrain <- read.table(file = file.path(dataPath, 'train', 'subject_train.txt'), header = FALSE)
## Merge train and test sets by dataset type
features <- rbind(featuresTest, featuresTrain)
activity <- rbind(activityTest, activityTrain)
subject <- rbind(subjectTest, subjectTrain)
## Set variable names
featureNames <- read.table(file = file.path(dataPath, "features.txt"))
names(features) <- featureNames$V2
names(activity) <- c("activity")
names(subject) <- c("subject")
## Merge everything into one data frame
df <- cbind(subject, activity, features)
# 2. Extract only the measurements on the mean and standard deviation for each measurement.
relevantIndices <- grep("mean|std", names(df))
## Make sure the subject and activity columns are not left out.
relevantIndices <- c(1, 2, relevantIndices)
df <- df[, relevantIndices]
# 3. Use descriptive activity names to name the activities in the data set
activityNames <- read.table(file = file.path(dataPath, "activity_labels.txt"))
## Rename activity indices into corresponding activity names
df$activity <- cut(df$activity, breaks = c(0, 1, 2, 3, 4, 5, 6), labels = activityNames$V2)
df$subject <- as.factor(df$subject)
# 4. Appropriately label the data set with descriptive variable names.
names(df) <- gsub('^t', 'Time', names(df))
names(df) <- gsub('^f', 'Frequency', names(df))
names(df) <- gsub('Acc', 'Accelerometer', names(df))
names(df) <- gsub('Gyro', 'Gyroscope', names(df))
names(df) <- gsub('Mag', 'Magnitude', names(df))
names(df) <- gsub('BodyBody', 'Body', names(df))
###names(df) <- gsub('-', '', names(df))
# 5. Create a second, independent tidy data set with the average
#    of each variable for each activity and each subject.
by_activity <- group_by(df, subject, activity)
summarise_at(by_activity, 3:ncol(by_activity), mean)
colMeans(by_activity)
?colMeans
colMeans(by_activity[, 3:ncol(by_activity)])
?data.table
??data.table
aggregate(df[, 3:ncol(df)], df[, 1:2], FUN = mean)
temp <- aggregate(df[, 3:ncol(df)], df[, 1:2], FUN = mean)
dim(temp)
str(temp)
df[1:2, 1:2]
df[1:4, 1:4]
?aggregate
temp <- aggregate(df[, 3:ncol(df)], by = df[, 1:2], FUN = mean)
View(temp)
View(temp)
?dcast
?cast
aggregate(. ~ activity, d[-2], mean)
aggregate(. ~ activity, df[-2], mean)
df[2]
aggregate(value ~ subject + activity, data = df, FUN = 'mean')
aggregate(. ~ subject + activity, data = df, FUN = 'mean')
str(df)
new <- aggregate(. ~ subject + activity, data = df, FUN = 'mean')
new <- new[order(df$subject, df$activity), ]
new
str(new)
new[1:4, 1:4]
new <- aggregate(. ~ subject + activity, data = df, FUN = 'mean')
new[1:4, 1:4]
new[1:7, 1:4]
new[1:50, 1:4]
new <- new[order(new$subject, new$activity), ]
new[1:50, 1:4]
?write.table
write.table(tidy, file = "tidy.txt", row.names = FALSE)
tidy <- aggregate(. ~ subject + activity, data = df, FUN = 'mean')
tidy <- tidy[order(tidy$subject, tidy$activity), ]
write.table(tidy, file = "tidy.txt", row.names = FALSE)
library(knitr)
install.packages("knitr")
library(knitr)
knit2html("codebook.Rmd")
?knit2html
