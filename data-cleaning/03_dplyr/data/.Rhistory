!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
select(cran, size:ip_id)
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran2
cran3
mutate(cran3, size_mb = size / 2^20)
cran3
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran_3, correct_size = size - 1000)
mutate(cran3, correct_size = size - 1000)
mutate(cran3, correct_size = size + 1000)
summarise(cran, avg_bytes = mean(size))
summarize(cran, avg_bytes = mean(size))
library(dplyr)
tbl_df(mydf)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package)
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
play()
oct <- read.csv('~/Downloads/sams_cont.csv')
nxt()
top_counts
View(top_counts)
top_counts_sorted = arrange(top_counts, desc(count))
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
f
cran
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count -grade)
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, value)
res <- gather(students2, sex_class, value, -grade)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
students2
submit()
students3
submit()
?spread
submit()
submit()
submit()
extract_numeric("class5")
submit()
submit()
submit()
?mutate
submit()
students4
submit()
submit()
submit()
passed
failed
mutate(passed, status = "passed")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
?bind_rows
bind_rows(passed, failed)
sat
?select
?gather
?select
?separate
submit()
submit()
submit()
submit()
swirl()
zQ48kGxxlOnJR2r4
library(tidyr)
students
?gather
gather(students, sex, count -grade)
gather(students, sex, count, -grade)
students2
?gather
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
submit()
students3
submit()
submit()
?spread
submit()
extract_numeric("class")
extract_numeric("class5")
submit()
students4
students4
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, status = "passedd")
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
bind_rows(failed, passed)
bind_rows(passed, failed)
sat
submit()
?separatre
?separate
submit()
submit()
submit()
submit()
submit()
getwd()
setwd('../')
getwd()
dir.create('03_dplyr')
dir.create('./03_dplyr/data')
setwd('./03_dplyr/data')
getwd()
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv', destfile = "./community.csv", method = "curl")
data = read.csv(./community.csv)
data = read.csv("./community.csv")
data
df <- as.data.frame(data)
df
df <- tbl_df(df)
df
df
dim(df)
select(df, ACR > 3, AGS == 6)
library(dplyr)
select(df, ACR > 3, AGS == 6)
df %>% select("ACR" > 3, "AGS" == 6)
df %>% select(ACR > 3, AGS == 6)
?select
df %>% filter(ACR > 3, AGS == 6)
df %>% filter(ACR > 3)
head(df %>% filter(ACR > 3))
df
agricultureLogical <- df %>% filter(ACR == 3)
agricultureLogical
agricultureLogical <- df %>% filter(ACR == 3, AGS == 6)
which(agricultureLogical)
agricultureLogical
agricultureLogical <- df[df$ACR == 3, df$AGS == 6)
agricultureLogical <- df[df$ACR == 3, df$AGS == 6]
df[df$ACR == 3]
df[ACR ==3]
agricultureLogical <- df[df$ACR == 3, df$AGS == 6, ]
agricultureLogical <- df[(df$ACR == 3 & df$AGS == 6), ]
agricultureLogical
which(agricultureLogical)
agricultureLogical <- subset(df, ACR == 3, AGS ==6)
agricultureLogical
agricultureLogical <- subset(df, ACR == 3 & AGS ==6)
agricultureLogical
which(with(hello, (ACR == 3 & AGS == 6)))
which(with(df, (ACR == 3 & AGS == 6)))
.Last.value
one <- .Last.value
library(jpeg)
install.packages("jpeg")
library(jpeg)
?jpeg
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg', destfile="two.jpg", method = "curl")
readJPEG("./two.jpg", native=T)
?readJPEG
img <- readJPEG('./two.jpg', native = T)
summary(img)
?quantile
quantile(img, probs = c(30, 80))
quantile(img, probs = c(0.3, 0.8))
two <- .Last.value
two
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv', destfile = "./gdp.csv")
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv', destfile = "edu.csv")
gdp <- read.csv("gdp.csv")
head(gdp, 2)
edu <- read.csv("edu.csv")
head(edu, 2)
head(gdp, 6)
gdp <- tbl_df(gdp)
gdp
edu <- tbl_df(edu)
?separate
?gather
?dplyr
?`dplyr-package`
browseVignettes("dplyr")
?merge
bind_rows(gdp, edu)
?bind_rows
edu
gdp
gdp <- rename(gdp, CountryCode = "X")
gdp <- rename(gdp, CountryCode = X)
gdp
bind_rows(gdp, edu, .id = "CountryCode")
gdp
edu
bind_rows(edu, gdp, .id = "CountryCode")
sapply(df, class)
sapply(gdp, class)
sapply(edu, class)
edu$CountryCode <- as.character(edu$CountryCode)
sapply(edu, class)
edu
gdp$CountryCode <- as.character(gdp$CountryCode)
gdp
bind_rows(edu, gdp, .id = "CountryCode")
head(.Last.value, 30)
.Last.value[1:30,]
.Last.value[30,]
.Last.value[50,]
.Last.value[3,]
.Last.value[30,]
temp <- bind_rows(edu, gdp, .id = "CountryCode")
temp[1:30,]
temp[30,]
temp[31,]
temp[61,]
temp[20,]
gdp
gdp[4:,]
gdp[4:nrow(gdp),]
gdp[5:nrow(gdp),]
gdp <- .Last.value
edu
gdp
temp <- bind_rows(edu, gdp, .id = "CountryCode")
temp
temp <- merge(gdp, edu, by = "CountryCode")
temp
head(temp)
head(temp, 1)
head(temp, 2)
head(temp, 2)
head(temp, 3)
temp %>% arrange(desc(Gross.domestic.product.2012))
?arrange
temp %>% arrange(desc(Gross.domestic.product.2012))
temp 2 <- .Last.value
temp %>% arrange(desc(Gross.domestic.product.2012))
temp2 <- .Last.value
temp2[13]
temp2[13, ]
temp %>% arrange(desc(Gross.domestic.product.2012))
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
f <- file.path(getwd(), "GDP.csv")
download.file(url, f)
dtGDP <- data.table(read.csv(f, skip = 4, nrows = 215))
list.files()
gdp <- tbl_df(read.csv('gdp.csv', skip = 4))
head(gdp)
rename(gdp, CountryCode = X)
gdp
gdp <- rename(gdp, CountryCode = X)
gdp
edu
head(read.csv('edu.csv'))
gdp <- tbl_df(read.csv('gdp.csv', skip = 4, stringsAsFactors = T))
gdp
gdp <- rename(gdp, CountryCode = X)
gdp
edu
edu <- tbl_df(read.csv('edu.csv', stringsAsFactors = T))
edu
bind_rows(gdp, edu, .id = "CountryCode")
bind_rows(gdp, edu)
temp <- bind_rows(gdp, edu)
temp
temp$CountryCode
temp2 <- .Last.value
gdp
gdp$CountryCode %>% as.character
gdp
gdp$CountryCode <- as.character(gdp$CountryCode)
gdp
edu$CountryCode <- as.character(edu$CountryCode)
edu
bind_rows(gdp, edu)
temp <- bind_rows(gdp, edu)
temp
temp$CountryCode
temp <- bind_rows(gdp, edu, .id = "CountryCode")
temp
temp$CountryCode
temp[,2]
temp[1:50, 2]
?merge
edu <- tbl_df(read.csv('edu.csv', stringsAsFactors = T))
gdp <- tbl_df(read.csv('gdp.csv', skip = 4, stringsAsFactors = T))
edu
gdp
merge(gdp, edu, by.x="X", by.y="CountryCode")
gdp
edu
mergedData <- merge(gdp, edu, by.x="X", by.y="CountryCode")
mergedData
dim(mergedData)
mergedData <- merge(gdp, edu, by.x="X", by.y="CountryCode", all=T)
dim(mergedData)
mergedData
mergedData <- merge(gdp, edu, by.x="X", by.y="CountryCode", all=T, na.rm = T)
dim(mergedData)
?intersect
intersect(gdp, edu)
?intersect
?intersect
rename(gdp, CountryCode = X)
gdp
edu
gdp <- rename(gdp, CountryCode = X)
gdp
edu
intersect(gdp, edu)
intersect(gdp$CountryCode, edu$CountryCode)
countries <- .Last.value
order(countries)
sort(countries)
length(countries)
union(gdp$CountryCode, edu$CountryCode)
setdiff(gdp$CountryCode, edu$CountryCode)
setdiff(edu$CountryCode, gdp$CountryCode)
union_all(gdp$CountryCode, edu$CountryCode)
edu
gdp
gdp$CountryCode
na.omit(gdp$CountryCode)
intersect(gdp$CountryCode, edu$CountryCode)
temp
temp %>% arrange(desc(X4))
temp <- temp[, 2:ncol(temp)]
temp
temp %>% arrange(desc(X4))
temp %>% arrange(desc(X.4))
temp
temp[13,]
four <- .Last.value
three <- temp[13,]
dim(temp)
gdp
str(gdp)
gdp$X.5
read.csv("gdp.csv")
gdp <- read.csv('gdp.csv', skip = 4, nrows = 190)
gdp <- read.csv('gdp.csv', skip = 4, nrows = 190, stringsAsFactors = F)
?read.csv
gdp
head(gdp, 1)
tail(gdp, 2)
edu <- read.csv('edu.csv', stringsAsFactors = F)
head(edu)
head(edu, 1)
head(gdp, 1)
colnames(gdp) <- c("CountryCode", "Rank", "Country.Name", "GDP.Value")
head(gdp, 1)
head(gdp, 2)
gdp <- read.csv('gdp.csv', skip = 4, nrows = 190, stringsAsFactors = F)
head(gdp, 1)
colnames(gdp) <- c("CountryCode", "Rank", "CountryName", "GDPValue")
head(gdp, 1)
gdp <- read.csv('gdp.csv', skip = 4, nrows = 190, stringsAsFactors = F)
head(gdp, 1)
gdp <- gdp[, c(1,2, 4, 5)]
head(gdp, 1)
colnames(gdp) <- c("CountryCode", "Rank", "Country.Name", "GDP.Value")
head(gdp, 1)
?gsub
str(gdp$GDP.Value)
extract_numeric(gdp$GDP.Value)
gdp$GDP.Value <- extract_numeric(gdp$GDP.Value)
head(gdp, 1)
head(edu)
head(edu, 1)
head(gdp, 1)
matchedData <- merge(gdp, edu, by.x = "CountryCode", by.y = "CountryCode")
dim(matchedData)
head(matchedData, 1)
arrange(matchedData, GDP.Value)
matchedData <- arrange(matchedData, GDP.Value)
matchedData[13, ]
matchedData[13, 3]
matchedData[1:10, 6]
str(matchedData)
unique(matchedData$Income.Group)
filter(matchedData, Income.Group == "High income: nonOECD")
high <- filter(matchedData, Income.Group == "High income: nonOECD")
str(high)
mean(high$Rank)
unique(matchedData$Income.Group)
OECD <- filter(matchedData, Income.Group == "High income: OECD")
nonOECD <- filter(matchedData, Income.Group == "High income: nonOECD")
dim(OECD)
dim(nonOECD)
?filter
anyOECD <- filter(matchedData, Income.Group == "High income: nonOECD" | Income.Group == "High income: OECD")
dim(anyOECD)
mean(anyOECD$Rank)
mean(OECD$Rank, nonOECD$Rank)
mean(OECD$Rank)
mean(nonOECD$Rank)
?cut
ч <- rnorm(100)
ч
x <- rnorm(100)
x
qx <- quantile(x)
qz
qx
ind <- cut(x, qx, include.lowest = TRUE)
ind
?cut
split(x, ind)
?quantile
qx <- quantile(x, probs = seq(0, 1, by=0.2))
qx
qx <- quantile(x)
qx
x = rnorm(10)
x
qx <- quantile(x)
qx
qx <- quantile(x, probs = seq(0, 1, by=0.2))
qx
ind <- cut(x, qx, include.lowest = T)
split(x, ind)
x
?split
x + 1
temp
gdp
qx <- quantile(gdp, probs = seq(0, 1, by=0.2))
qx <- quantile(gdp$Rank, probs = seq(0, 1, by=0.2))
qx
y <- split(x, ind)
y
ind <- cut(gdp$Rank, qx, include.lowest = T)
ind
y <- split(gdp$Rank, ind)
y
qx <- quantile(gdp$Rank, seq(0, 1, length = 6))
qx
head(cut(gdp$Rank, breaks = qx))
gdp$quantile <- cut(gdp$Rank, breaks = qx)
head(gdp)
?dcast
??dcast
?data.frame
data.frame(gdp$quantile, edu$Income.Group)
temp
qx <- quantile(temp$X.1, seq(0, 1, length = 6))
temp$X.1 <- as.numeric(temp$X.1)
qx <- quantile(temp$X.1, seq(0, 1, length = 6))
qx <- quantile(temp$X.1, seq(0, 1, length = 6), na.rm = T)
qx
?cut2
??cut2
temp$Rank.Group <- cut(temp$X.2, g = 5)
temp$Rank.Group <- cut(temp$X.1, g = 5)
temp$Rank.Group <- cut(temp$X.1, g = 5)
?cut
temp$Rank.Group <- cut(temp$X.1, breaks = 5)
temp
temp$Rank.Group
table(temp$Rank.Group, temp$Income.Group)
nrow(temp_)
nrow(temp)
nrow(mergedData)
View(matchedData)
nrow(matchedData)
matchedData
str(matchedData)
matchedData$Rank.Group <- cut(matchedData$Rank, breaks = 5)
matchedData$Rank.Group
table(matchedData$Rank.Group, matchedData$Income.Group)
table(matchedData$Rank.Group, matchedData$Income.Group)
